#avp jaguar map builder Blender script by Bobblen
#this script is designed to work with text files generated by the avp jaguar map reader companion php script
#just create a new scene in Blender, delete everything, leave in object mode and run the script to generate a level mesh

import bpy

file = open('D:/Maps/sublevel3.txt', 'r')
lines = file.readlines()

for z in lines:
    sectorcode=z
    xcoord=int((sectorcode[0:2]))*8
    ycoord=int((sectorcode[2:4]))*8*-1
    left=(sectorcode[4:5])
    front=(sectorcode[5:6])
    right=(sectorcode[6:7])
    back=(sectorcode[7:8])
    ceiling=(sectorcode[8:9])
    floor=(sectorcode[9:10])
    
    #do nothing if no floor
    if floor != 'x':
        #Define vertices, faces
        verts = [
        (0,0,0),#0
        (0,8,0),#1
        (8,8,0),#2
        (8,0,0),#3
        (0,0,7),#4
        (0,8,7),#5
        (8,8,7),#6
        (8,0,7),#7
        ]
        faces = [
        (0,4,5,1), #left
        (1,5,6,2), #front
        (2,6,7,3), #right 
        (3,7,4,0), #back
        (0,1,2,3), #floor 
        (4,5,6,7), #ceiling
        ]
        
        pillars = {'r','l','p'}
        #define additional verts if sector has pillars
        if left in pillars or front in pillars or right in pillars or back in pillars:
            #left side
            verts.append((0,1,0))#8
            verts.append((0,1,7))#9
            verts.append((0,7,0))#10
            verts.append((0,7,7))#11
            #front side
            verts.append((1,8,0))#12
            verts.append((1,8,7))#13
            verts.append((7,8,0))#14
            verts.append((7,8,7))#15
            #right side
            verts.append((8,7,0))#16
            verts.append((8,7,7))#17
            verts.append((8,1,0))#18
            verts.append((8,1,7))#19
            #back side
            verts.append((7,0,0))#20
            verts.append((7,0,7))#21
            verts.append((1,0,0))#22
            verts.append((1,0,7))#23
        
        
        #left side mods
        if left == 'r': #add pillar right
            faces.remove((0,4,5,1))
            faces.append((10,11,5,1))
        if left == 'l': #add pillar left
            faces.remove((0,4,5,1))
            faces.append((0,4,9,8))            
        if left == 'p': #add pillar both sides
            faces.remove((0,4,5,1))
            faces.append((10,11,5,1)) 
            faces.append((0,4,9,8)) 
        if left == 'x': #leave empty
            faces.remove((0,4,5,1))
        if left == 'd': #door (leave empty for now)
            faces.remove((0,4,5,1))
        
        #front side mods    
        if front == 'r':
            faces.remove((1,5,6,2))
            faces.append((14,15,6,2))
        if front == 'l':
            faces.remove((1,5,6,2))
            faces.append((13,12,1,5))
        if front == 'p':
            faces.remove((1,5,6,2))
            faces.append((14,15,6,2))
            faces.append((13,12,1,5))
        if front == 'x':
            faces.remove((1,5,6,2))
        if front == 'd':
            faces.remove((1,5,6,2))
            
        #right side mods    
        if right == 'r':
            faces.remove((2,6,7,3))
            faces.append((7,3,18,19))
        if right == 'l':
            faces.remove((2,6,7,3))
            faces.append((16,17,6,2))
        if right == 'p':
            faces.remove((2,6,7,3))
            faces.append((7,3,18,19))
            faces.append((16,17,6,2))
        if right == 'x':
            faces.remove((2,6,7,3))
        if right == 'd':
            faces.remove((2,6,7,3))  
        
        #back side mods    
        if back == 'r':
            faces.remove((3,7,4,0))
            faces.append((22,23,4,0))
        if back == 'l':
            faces.remove((3,7,4,0))
            faces.append((21,20,3,7))
        if back == 'p':
            faces.remove((3,7,4,0))
            faces.append((22,23,4,0))
            faces.append((21,20,3,7))
        if back == 'x':
            faces.remove((3,7,4,0))
        if back == 'd':
            faces.remove((3,7,4,0))
            
        
        
        #Define mesh and object
        mesh = bpy.data.meshes.new("Cube")
        object = bpy.data.objects.new("Cube", mesh)
        
        #Set location and scene of object
        object.location = (xcoord,ycoord,0)
        bpy.context.collection.objects.link(object)
        
        #Create mesh
        mesh.from_pydata(verts,[],faces)
        mesh.update(calc_edges=True)